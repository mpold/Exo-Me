#!/usr/bin/perl -w
use 5.10.1;
use warnings;
use strict;


# Always have the terms you want the precise counts for in a separate file, each term on a separate line
# Always negate the regex/symbols/terms of interest because:
# regex containing some non-alphanumeric characters won't be counted un-negated
# See 'NEGATE_REGEX.pl'
# Use SINGLE QUOTES instead of double quotes because the double-quoted regex containing some non-alphanumeric character combinations won't be counted otherwise
# For example, a regex containing parentheses like S02\-3565\(2\-3) won't be counted if double-quoted
# Even worse, a regex like S02\-3565\(2\-3 will make the below script exit if double-quoted

my $In_Dir = "paste your input directory here";
my $Out_Dir = "paste your output directory here";


# The input file contains the regex you want to count
# The input regex MUST be separated by the newline '\n'

my $In_File = "paste your file name of interest here";
my $Out_File = "name your output file";

my $Slash = "\/";
my $Final = "Final_";

# Have the regex/symbols/terms of inters in the parentheses below, all individually single-quoted
# Use NEGATE_REGEX.pl to make the single-quoted array to be pasted in the parentheses below
my @Symbol = ('ACINAR13','ACINAR01','ACINAR06','TCGA\-AA\-A00N\-01','TCGA\-BI\-A0VS\-01','TCGA\-CH\-5752\-01');

foreach my $Symbol(@Symbol){

open (IN,"$In_Dir$Slash$In_File");
open (OUT,">>$Out_Dir$Slash$Out_File");
	select (OUT);

		my $REGEX = 0;

			while(<IN>){

			# makes perl take into account both the start and end pattern of each line
			# avoids shorter regex counted as parts of longer, more complex regex
			# ^ denotes the start of each line in the input file
			# $ denotes the end of each line in the input file
			$REGEX++ if $_ =~ m/^$Symbol$/;
			
		}

	print "$REGEX,$Symbol\n";
	}
close(IN);
close(OUT);

###############################################################################
# STEP2: Gets rid the forward slashes, the negation symbols in the output files

open (IN,"$Out_Dir$Slash$Out_File");
open (OUT,">>$Out_Dir$Slash$Final$Out_File");
	select (OUT);

			while(<IN>){

			s/\\//g;
			
			print;
			
		}

close(IN);
close(OUT);
